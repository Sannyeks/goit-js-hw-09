{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,SAAWC,SAASC,cAAc,UAmCpC,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA1CbN,EAAKC,SAASa,iBAAiB,UAE/B,SAAsBC,GACpBA,EAAIC,iBACJ,MAAOV,MAAAW,EAAKC,KAACA,EAAIC,OAACA,GAAUJ,EAAIK,cAAcC,SACxCC,EAAaC,OAAON,EAAMO,OAC1BC,EAAYF,OAAOL,EAAKM,OACxBE,EAAcH,OAAOJ,EAAOK,OAElC,IAAK,IAAIG,EAAW,EAAGA,GAAYD,EAAaC,GAAY,EACzC,IAAbA,EACFvB,EAAcuB,EAAUL,GACvBM,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBuB,EAAA/B,GAASgC,OAAOC,QAAQ,uBAAqB1B,QAAiBC,MAAU,IAEzE0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBuB,EAAA/B,GAASgC,OAAOG,QAAQ,sBAAoB5B,QAAiBC,MAAU,IAK3EF,EAAcuB,EAAUL,EAAaG,GAAaE,EAAW,IACxDC,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBuB,EAAA/B,GAASgC,OAAOC,QAAQ,uBAAqB1B,QAAiBC,MAAU,IAEzE0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBuB,EAAA/B,GAASgC,OAAOG,QAAQ,sBAAoB5B,QAAeC,MAAU,IAI3EN,EAAKC,SAASiC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nconst refs = {\n  mainForm : document.querySelector('.form'),\n}\nrefs.mainForm.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt){\n  evt.preventDefault();\n  const {delay,step,amount} = evt.currentTarget.elements;\n  const delayValue = Number(delay.value);\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n\n  for (let position = 1; position <= amountValue; position += 1){\n    if (position === 1) {\n      createPromise(position, delayValue)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    }\n    \n  else{\n    createPromise(position, delayValue + stepValue * (position - 1))\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n      }\n    }\n    refs.mainForm.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","mainForm","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","evt","preventDefault","delay1","step","amount","currentTarget","elements","delayValue","Number","value","stepValue","amountValue","position1","then","$parcel$interopDefault","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.9eb17b27.js.map"}